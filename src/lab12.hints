[{"code": "'src' in node.attributes", "type": "dict"},
 {"code": "'href' in node.attributes", "type": "dict"},
 {"code": "'action' in elt.attributes", "type": "dict"},
 {"code": "'href' in elt.attributes", "type": "dict"},
 {"code": "'content-security-policy' in headers", "type": "dict"},
 {"code": "b'Browser'", "js": "'Browser'"},
 {"code": "print", "js": "console.log"},
 {"code": "self.task_code(*self.args)", "js": "await this.task_code(this.args)"},
 {"code": "run_callback", "js": "await run_callback()"},
 {"code": "MeasureTime()", "js": "new MeasureTime()"},
 {"code": "run_load()", "js": "await run_load()"},
 {"code": "run_load", "js": "run_load"},
 {"code": "def __init__(self, task_code, *args):\n    self.task_code = task_code\n    self.args = args", "js": "  async init(task_code) {\n    this.task_code = task_code;\n    this.args = Array.prototype.slice.call(arguments, 1);\n    return this;\n  }"},
 {"code": "callback", "js": "callback"},
 {"code": "self.node_to_handle = {}", "js": "    this.node_to_handle = new Map();"},
 {"code": "self.default_style_sheet.copy()", "js": "this.default_style_sheet.slice()"},
 {"code": "f.read()", "js": "f.read()"},
 {"code": "open('runtime12.js').read()", "js": "filesystem.open('runtime12.js').read()"}
]
